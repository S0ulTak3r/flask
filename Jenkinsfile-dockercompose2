@Library('FunctionsLibrary') _

pipeline 
{
    agent any

    environment 
    {
        SSHKEYLOCATION = "/var/lib/jenkins/.ssh/Daniel.pem"
        DOCKERPROJECTNAME = "s0ultak3r/dockerflask"
        DOCKERDBNAME= "s0ultak3r/dockerdb"
        ANSIBLEFOLDER= "/var/lib/jenkins/AnsibleFiles/Daniel-B-AutoAnsible"
        GITURL= "git@github.com:S0ulTak3r/flask.git"
        REQLOCATION= "./flask/flask-app/requirements.txt"
    }

    triggers 
    {
        pollSCM('*/1 * * * *')
    }
    
    stages 
    {
        
        stage('Changes Check') 
        {
            steps 
            {
                script 
                {
                    pipelinefunctions.checkChanges()
                }
            }
        }

        stage('Cleanup') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps 
            {
                script
                {
                    pipelinefunctions.cleanupWorkspace()
                    sh "sudo docker image prune --force"
                    sh "sudo docker container prune --force"
                    dockerfunctions.deleteImageVersion(env.DOCKERPROJECTNAME)
                    dockerfunctions.deleteImageVersion(env.DOCKERDBNAME)
                }
            }
        }
        
        stage('Clone') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps
            {
                script
                {
                    gitfunctions.clonegit(env.GITURL)
                    sh "aws s3 cp s3://daniel-sela/unity-build.zip unity-build.zip"
                    sh "unzip unity-build.zip -d ./flask/flask-app/Static/"
                }
            }
        }
        
        stage('Install Dependencies') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps 
            {
                script 
                {
                    ansiblefunctions.installDependenciesSystemLvl(env.ANSIBLEFOLDER,"installLocal.yml")
                }
            }
        }

        stage('Docker Login')
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps
            {
                script
                {
                    dockerfunctions.loginDockerHub()
                }
            }
        }
        stage('Build-create docker image and push') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps 
            {
                script
                {
                    dockerfunctions.BuildAndPush(env.DOCKERPROJECTNAME, "./flask/flask-app/")
                }
            }
        }
        
        stage('Build-create docker image and pushaaaa') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps 
            {
                script
                {
                    dockerfunctions.BuildAndPush(env.DOCKERDBNAME, "./flask/mysql/")
                }
            }
        }

        stage('Get Test+Prod Instance Details + install docker')
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps 
            {
                //pulls IP of test instance by automatical means
                script 
                {
                    awsfunctions.GetInstanceDetails()
                }
            }
        }

        stage("install test+prod docker")
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps
            {
                script
                {
                    ansiblefunctions.installDockerRemote(env.ANSIBLEFOLDER,"InstallAllComponents.yml")
                }
            }
        }

        stage('fetch docker-compose file to test+prod')
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps
            {
                script
                {
                    scpfunctions.TransferFile(env.publicTestIp,"./flask/docker-compose.yml",env.SSHKEYLOCATION)
                    echo "Current Directory:"
                    sh "pwd"
                    echo "Listing Directory Contents:"
                    sh "ls -la"
                    scpfunctions.TransferFile(env.publicTestIp,"./flask/prometheus.yml",env.SSHKEYLOCATION)
                    scpfunctions.TransferFile(env.publicProdIp,"./flask/docker-compose.yml",env.SSHKEYLOCATION)
                    scpfunctions.TransferFile(env.publicProdIp,"./flask/prometheus.yml",env.SSHKEYLOCATION)
                }
            }
        }

        stage('Pull + Run from dockerhub to test server') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps 
            {
                script
                {
                    dockerfunctions.PullDockerCompose(env.publicTestIp,env.SSHKEYLOCATION)
                    dockerfunctions.StartDockerCompose(env.publicTestIp,env.SSHKEYLOCATION)
                }
            }
        }

        stage('Curl Test') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps 
            {
                script
                {
                    testingfunctions.curlTest(env.publicTestIp,"5000")
                }
            }
        }
        
        stage('Closing test server- if success') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps 
            {
                script
                {
                    dockerfunctions.StopDockerCompose(env.publicTestIp,env.SSHKEYLOCATION)
                    dockerfunctions.cleanDockerContainers(env.publicTestIp,env.SSHKEYLOCATION)
                    awsfunctions.closeInstance(env.instanceTestId)
                }
            }
        }


        
        stage('Deployment') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps 
            {
                script
                {
                    dockerfunctions.PullDockerCompose(env.publicProdIp,env.SSHKEYLOCATION)
                    dockerfunctions.StartDockerCompose(env.publicProdIp,env.SSHKEYLOCATION)
                    dockerfunctions.cleanDockerContainers(env.publicProdIp,env.SSHKEYLOCATION)
                }
            }
        }
    }
}
