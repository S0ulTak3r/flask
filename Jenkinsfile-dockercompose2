
@Library(value="FunctionsLibrary", changelog=false) _

pipeline 
{
    agent any

    environment 
    {
        // Define envdironment variables that will be used throughout the pipeline
        SSHKEYLOCATION = "${params.SSHKEYLOCATION}"
        DOCKERFLASKIMAGE = "${params.DOCKERFLASKIMAGE}"
        DOCKERDBIMAGE = "${params.DOCKERDBIMAGE}"
        ANSIBLEFOLDER = "${params.ANSIBLEFOLDER}"
        GITURL = "${params.GITURL}"
        REQLOCATION = "${params.REQLOCATION}"
        GIT_SSH_COMMAND = "ssh -o StrictHostKeyChecking=no"
        WINDOWSIP= "${params.WINDOWSIP}"
        GITROOTFOLDER = "${params.GITROOTFOLDER}"
        GCSBUCKETNAME = "${params.GCSBUCKETNAME}"
        GCSHELMFOLDER = "${params.GCSHELMFOLDER}"
        INSTALLLOCALPLAYBOOK = "${params.INSTALLLOCALPLAYBOOK}"
        CLUSTERNAME = "${params.CLUSTERNAME}"
        CLUSTERZONE = "${params.CLUSTERZONE}"
        GOOGLEPROJECTNAME = "${params.GOOGLEPROJECTNAME}"
        TERRAFORMFOLDERNAME = "${params.TERRAFORMFOLDERNAME}"
        FLASKBUILDFOLDER = "${params.FLASKBUILDFOLDER}"
        DBBUILDFOLDER = "${params.DBBUILDFOLDER}"
        TESTCONTEXT = "${params.TESTCONTEXT}"
        TESTHELMRELEASE = "${params.TESTHELMRELEASE}"
        PRODCONTEXT = "${params.PRODCONTEXT}"
        PRODHELMRELEASE = "${params.PRODHELMRELEASE}"
        HELMPACKAGENAME = "${params.HELMPACKAGENAME}"
    }

    triggers 
    {
        pollSCM('*/1 * * * *')
    }
    
    stages 
    {
        //
        stage('Version Check') 
        {
            steps 
            {
                script 
                {
                    if (params.RELEVANTDOCKERTAGDB == "" && params.RELEVANTDOCKERTAGFLASK == "" ) 
                    {
                        echo "No version specified for rollback/upgrade, getting latest versionS from file"
                    }
                    else
                    {
                        
                        echo "Version specified for rollback/upgrade"
                        if (params.RELEVANTDOCKERTAGFLASK != "")
                        {
                            echo "if Deploying version for flask: ${params.RELEVANTDOCKERTAGFLASK}"
                        }
                        else
                        {
                            echo "Deployment Not Changed For Flask, Will Use Latest Version From File"
                        }
                        if (params.RELEVANTDOCKERTAGDB != "")
                        {
                            echo "if Deploying version for db: ${params.RELEVANTDOCKERTAGDB}"
                        }
                        else
                        {
                            echo "Deployment Not Changed For DB, Will Use Latest Version From File"
                        }
                    } 
                }
            }
        }
        
        stage('Changes Check') 
        {
            steps 
            {
                script 
                {
                    pipelinefunctions.checkChanges("Jenkinsfile-dockercompose2")
                }
            }
        }

        stage('Cleanup') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps 
            {
                script
                {
                    // Clean up Jenkins workspace
                    pipelinefunctions.cleanupWorkspace()

                    // Prune docker containers
                    dockerfunctions.pruneDockerContainers()

                    // Prune docker images
                    dockerfunctions.pruneDockerImages()

                    // Retain only the latest versions of the Docker images
                    dockerfunctions.retainLatestImageVersionOnly(env.DOCKERFLASKIMAGE)
                    dockerfunctions.retainLatestImageVersionOnly(env.DOCKERDBIMAGE)
                }
            }
        }

        
        stage('Clone') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps
            {
                script
                {
                    // Clone the repository
                    gitfunctions.clonegit(env.GITURL, 'main')
                    
                    // Download and unzip the unity build
                    sh "aws s3 cp s3://daniel-sela/unity-build.zip unity-build.zip"
                    sh "unzip unity-build.zip -d ./flask/flask-app/Static/"
                }
            }
        }



        stage('Setup') 
        {
            steps 
            {
                script 
                {
                    def jsonText = readFile("./${env.GITROOTFOLDER}/VersionControl/DockerComposePipeline/versions.json")
                    echo "JSON Content: $jsonText"
                    def jsonSlurper = new groovy.json.JsonSlurper()
                    echo "jsonSlurper: $jsonSlurper"
                    def versions = jsonSlurper.parseText(jsonText)

                    echo "Flask version: ${versions.flask}"
                    
                    if (params.RELEVANTDOCKERTAGFLASK == "") 
                    {
                        env.RELEVANT_DOCKER_TAGFLASK = "${versions.flask}"
                    } 
                    else 
                    {
                        env.RELEVANT_DOCKER_TAGFLASK = params.RELEVANTDOCKERTAGFLASK
                    }

                    if (params.RELEVANTDOCKERTAGDB == "") 
                    {
                        env.RELEVANT_DOCKER_TAGDB = "${versions.database}"
                    } 
                    else 
                    {
                        env.RELEVANT_DOCKER_TAGDB = params.RELEVANTDOCKERTAGDB
                    }

                    echo "Deploying Flask version: ${env.RELEVANT_DOCKER_TAGFLASK}"  // Updated variable reference
                    echo "Deploying DB version: ${env.RELEVANT_DOCKER_TAGDB}"        // Updated variable reference
                }
            }
        }

        
        stage('Install Dependencies') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps 
            {
                script 
                {
                    // Install system level dependencies using Ansible
                    ansiblefunctions.installDependenciesSystemLvl(env.ANSIBLEFOLDER, env.INSTALLLOCALPLAYBOOK)
                }
            }
        }

        stage('Docker Login')
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps
            {
                script
                {
                    dockerfunctions.loginDockerHub()
                }
            }
        }

        stage('Parallel Docker Build and Push') {
            when {
                expression { return env.NO_CHANGES != "true" }
            }
            steps {
                script {
                    def newFlaskTag = null
                    def newDBTag = null
                    
                    // Build and push Docker images in parallel
                    parallel(
                        "Build and Push Flask Docker Image": {
                            newFlaskTag = dockerfunctions.BuildCheckAndPushV2(env.DOCKERFLASKIMAGE, env.GITROOTFOLDER, env.FLASKBUILDFOLDER)
                        },
                        "Build and Push DB Docker Image": {
                            newDBTag = dockerfunctions.BuildCheckAndPushV2(env.DOCKERDBIMAGE, env.GITROOTFOLDER, env.DBBUILDFOLDER)
                        }
                    )
                    
                    // Sequentially prompt user for each Docker image with a new tag
                    if (newFlaskTag != null) {
                        def userInput = timeout(time: 5, unit: 'MINUTES') {
                            input(
                                id: 'deployConfirmationFlask',
                                message: 'new flask tag detected, deploy this if all test succeed?',
                                parameters: [ choice(choices: ['Yes', 'No'], description: 'Proceed with deployment?', name: 'decision') ]
                            )
                        }
                        if (userInput == 'Yes') {
                            echo "updating production tag to ${newFlaskTag}"
                            env.RELEVANT_DOCKER_TAGFLASK = newFlaskTag
                        } else {
                            echo "production tag not updated to latest build version"
                        }
                    }
                    
                    if (newDBTag != null) {
                        def userInput = timeout(time: 5, unit: 'MINUTES') {
                            input(
                                id: 'deployConfirmationDB',
                                message: 'new db tag detected, deploy this if all test succeed?',
                                parameters: [ choice(choices: ['Yes', 'No'], description: 'Proceed with deployment?', name: 'decision') ]
                            )
                        }
                        if (userInput == 'Yes') {
                            echo "updating production tag to ${newDBTag}"
                            env.RELEVANT_DOCKER_TAGDB = newDBTag
                        } else {
                            echo "production tag not updated to latest build version"
                        }
                    }
                }
            }
        }


        stage("random")
        {
            steps
            {
                script
                {
                    echo "env.RELEVANT_DOCKER_TAGFLASK: ${env.RELEVANT_DOCKER_TAGFLASK}"
                    echo "env.RELEVANT_DOCKER_TAGDB: ${env.RELEVANT_DOCKER_TAGDB}"
                }
            }
        }


        stage('Get Test+Prod Instance Details') 
        {
            when 
            {
                expression { return env.NO_CHANGES != "true" }
            }
            steps 
            {
                script 
                {
                    def instanceDetails = awsfunctions.GetInstanceDetails()
                    env.instanceTestId = instanceDetails.testInstance
                    env.publicTestIp = instanceDetails.testIp
                    env.instanceProdId = instanceDetails.prodInstance
                    env.publicProdIp = instanceDetails.prodIp
                }
            }
        }


        stage("install test+prod docker")
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps
            {
                script
                {
                    ansiblefunctions.installDockerRemote(env.ANSIBLEFOLDER,"InstallAllComponents.yml")
                }
            }
        }

        stage('fetch docker-compose file to test+prod')
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps
            {
                script
                {
                    scpfunctions.TransferFile(env.publicTestIp,"./${env.GITROOTFOLDER}/docker-compose-test.yml",env.SSHKEYLOCATION)
                    scpfunctions.TransferFile(env.publicTestIp,"./${env.GITROOTFOLDER}/prometheusconfig.yml",env.SSHKEYLOCATION)
                    scpfunctions.TransferFile(env.publicProdIp,"./${env.GITROOTFOLDER}/docker-compose-prod.yml",env.SSHKEYLOCATION)
                    scpfunctions.TransferFile(env.publicProdIp,"./${env.GITROOTFOLDER}/prometheusconfig.yml",env.SSHKEYLOCATION)
                }
            }
        }

        stage('Pull + Run from dockerhub to test server') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps 
            {
                script
                {
                    dockerfunctions.PullDockerCompose(env.publicTestIp, env.SSHKEYLOCATION, env.RELEVANT_DOCKER_TAGFLASK, env.RELEVANT_DOCKER_TAGDB, "./docker-compose-test.yml")
                    dockerfunctions.StartDockerCompose(env.publicTestIp, env.SSHKEYLOCATION, env.RELEVANT_DOCKER_TAGFLASK, env.RELEVANT_DOCKER_TAGDB, "./docker-compose-test.yml")
                }
            }
        }

        stage('Curl Test') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps 
            {
                script
                {
                    testingfunctions.curlTest(env.publicTestIp,"5000")
                }
            }
        }
        
        stage('Closing test server- if success') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps 
            {
                script
                {
                    dockerfunctions.StopDockerCompose(env.publicTestIp,env.SSHKEYLOCATION,"./docker-compose-test.yml")
                    dockerfunctions.cleanDockerContainersAndImages(env.publicTestIp,env.SSHKEYLOCATION)
                    awsfunctions.closeInstance(env.instanceTestId)
                }
            }
        }


        


        stage('Deployment') {
            when {
                expression {
                    return env.NO_CHANGES != "true"
                }
            }
            steps {
                script {
                    def deployMessage = "Do you want to proceed with deployment?\nFlask Version: ${env.RELEVANT_DOCKER_TAGFLASK}\nDB Version: ${env.RELEVANT_DOCKER_TAGDB}"

                    def userInput = timeout(time: 5, unit: 'MINUTES') {
                        input(
                            id: 'deployConfirmation',
                            message: deployMessage,
                            parameters: [
                                booleanParam(defaultValue: false, description: 'Proceed with deployment?', name: 'deploy')
                            ]
                        )
                    }

                    if (userInput) {
                        dockerfunctions.cleanDockerContainersAndImages(env.publicProdIp,env.SSHKEYLOCATION)
                        dockerfunctions.StopDockerCompose(env.publicProdIp, env.SSHKEYLOCATION, "./docker-compose-prod.yml")
                        dockerfunctions.retainLatestImageVersionOnlyRemote(env.DOCKERFLASKIMAGE, env.publicProdIp, env.SSHKEYLOCATION)
                        dockerfunctions.retainLatestImageVersionOnlyRemote(env.DOCKERDBIMAGE, env.publicProdIp, env.SSHKEYLOCATION)
                        dockerfunctions.PullDockerCompose(env.publicProdIp, env.SSHKEYLOCATION, env.RELEVANT_DOCKER_TAGFLASK, env.RELEVANT_DOCKER_TAGDB, "./docker-compose-prod.yml")
                        dockerfunctions.StartDockerCompose(env.publicProdIp, env.SSHKEYLOCATION, env.RELEVANT_DOCKER_TAGFLASK, env.RELEVANT_DOCKER_TAGDB, "./docker-compose-prod.yml")

                        // Update the versions.json file using jq
                        sh """
                            jq '.flask = \"${env.RELEVANT_DOCKER_TAGFLASK}\" | .database = \"${env.RELEVANT_DOCKER_TAGDB}\"' ./${env.GITROOTFOLDER}/VersionControl/DockerComposePipeline/versions.json > ./${env.GITROOTFOLDER}/VersionControl/DockerComposePipeline/tmp_versions.json
                            mv ./${env.GITROOTFOLDER}/VersionControl/DockerComposePipeline/tmp_versions.json ./${env.GITROOTFOLDER}/VersionControl/DockerComposePipeline/versions.json
                        """

                        //Optional: Commit and push the change to the repository
                        sh """
                            cd ${env.GITROOTFOLDER}/
                            git add ./VersionControl/DockerComposePipeline/versions.json
                            git commit -m 'Update versions after successful deployment'
                            git push origin main
                        """
                    } else {
                        echo "Deployment skipped by user."
                        currentBuild.result = 'SUCCESS'
                    }
                }
            }
        }





    }
}
