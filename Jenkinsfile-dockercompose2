
@Library(value="FunctionsLibrary", changelog=false) _

pipeline 
{
    agent any

    environment 
    {
        // Define environment variables that will be used throughout the pipeline
        SSHKEYLOCATION = "${params.SSHKEYLOCATION}"
        DOCKERFLASKIMAGE = "${params.DOCKERFLASKIMAGE}"
        DOCKERDBIMAGE = "${params.DOCKERDBIMAGE}"
        ANSIBLEFOLDER = "${params.ANSIBLEFOLDER}"
        GITURL = "${params.GITURL}"
        REQLOCATION = "${params.REQLOCATION}"
        GIT_SSH_COMMAND = "ssh -o StrictHostKeyChecking=no"
        WINDOWSIP= "${params.WINDOWSIP}"
        GITROOTFOLDER = "${params.GITROOTFOLDER}"
        GCSBUCKETNAME = "${params.GCSBUCKETNAME}"
        GCSHELMFOLDER = "${params.GCSHELMFOLDER}"
        INSTALLLOCALPLAYBOOK = "${params.INSTALLLOCALPLAYBOOK}"
        CLUSTERNAME = "${params.CLUSTERNAME}"
        CLUSTERZONE = "${params.CLUSTERZONE}"
        GOOGLEPROJECTNAME = "${params.GOOGLEPROJECTNAME}"
        TERRAFORMFOLDERNAME = "${params.TERRAFORMFOLDERNAME}"
        FLASKBUILDFOLDER = "${params.FLASKBUILDFOLDER}"
        DBBUILDFOLDER = "${params.DBBUILDFOLDER}"
        TESTCONTEXT = "${params.TESTCONTEXT}"
        TESTHELMRELEASE = "${params.TESTHELMRELEASE}"
        PRODCONTEXT = "${params.PRODCONTEXT}"
        PRODHELMRELEASE = "${params.PRODHELMRELEASE}"
        HELMPACKAGENAME = "${params.HELMPACKAGENAME}"
        RELEVANT_DOCKER_TAG = "${params.RELEVANTDOCKERTAG}"
    }

    triggers 
    {
        pollSCM('*/1 * * * *')
    }
    
    stages 
    {
        
        stage('Changes Check') 
        {
            steps 
            {
                script 
                {
                    pipelinefunctions.checkChanges("Jenkinsfile-dockercompose2")
                }
            }
        }

        stage('Cleanup') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps 
            {
                script
                {
                    // Clean up Jenkins workspace
                    pipelinefunctions.cleanupWorkspace()

                    // Prune docker containers
                    dockerfunctions.pruneDockerContainers()

                    // Prune docker images
                    dockerfunctions.pruneDockerImages()

                    // Retain only the latest versions of the Docker images
                    dockerfunctions.retainLatestImageVersionOnly(env.DOCKERFLASKIMAGE)
                    dockerfunctions.retainLatestImageVersionOnly(env.DOCKERDBIMAGE)
                }
            }
        }

        
        stage('Clone') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps
            {
                script
                {
                    // Clone the repository
                    gitfunctions.clonegit(env.GITURL, 'master')
                    
                    // Download and unzip the unity build
                    sh "aws s3 cp s3://daniel-sela/unity-build.zip unity-build.zip"
                    sh "unzip unity-build.zip -d ./flask/flask-app/Static/"
                }
            }
        }

        
        stage('Install Dependencies') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps 
            {
                script 
                {
                    // Install system level dependencies using Ansible
                    ansiblefunctions.installDependenciesSystemLvl(env.ANSIBLEFOLDER, env.INSTALLLOCALPLAYBOOK)
                }
            }
        }

        stage('Docker Login')
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps
            {
                script
                {
                    dockerfunctions.loginDockerHub()
                }
            }
        }

        // Build Docker images for the Flask application and the database, and push them to DockerHub
        stage('Parallel Docker Build and Push') 
        {
            when 
            {
                // Only run this stage if there have been changes to the repository
                expression { return shouldRunStage() }
            }
            steps 
            {
                script 
                {
                    // Build Docker images for the Flask application and the database in parallel to save time
                    // If there are relevant changes detected in the source code, the images will also be pushed to DockerHub
                    parallel(
                        "Build-create dockerFlask image and push": {
                            dockerfunctions.BuildCheckAndPushV2(env.DOCKERFLASKIMAGE, env.GITROOTFOLDER, env.FLASKBUILDFOLDER)
                        },
                        "Build-create dockerDB image and push": {
                            dockerfunctions.BuildCheckAndPushV2(env.DOCKERDBIMAGE, env.GITROOTFOLDER, env.DBBUILDFOLDER)
                        }
                    )

                    // Update the default value of the RELEVANTDOCKERTAG parameter
                    if (env.RELEVANT_DOCKER_TAG) {
                        updateJobParameters(defaults: [string(name: 'RELEVANTDOCKERTAG', value: env.RELEVANT_DOCKER_TAG)])
                    }
                }
            }
        }

        stage('Get Test+Prod Instance Details') {
            when {
                expression { return env.NO_CHANGES != "true" }
            }
            steps {
                script {
                    def instanceDetails = awsfunctions.GetInstanceDetails()
                    env.instanceTestId = instanceDetails.testInstance
                    env.publicTestIp = instanceDetails.testIp
                    env.instanceProdId = instanceDetails.prodInstance
                    env.publicProdIp = instanceDetails.prodIp
                }
            }
        }


        stage("install test+prod docker")
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps
            {
                script
                {
                    ansiblefunctions.installDockerRemote(env.ANSIBLEFOLDER,"InstallAllComponents.yml")
                }
            }
        }

        stage('fetch docker-compose file to test+prod')
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps
            {
                script
                {
                    scpfunctions.TransferFile(env.publicTestIp,"./${env.GITROOTFOLDER}/docker-compose-test.yml",env.SSHKEYLOCATION)
                    scpfunctions.TransferFile(env.publicTestIp,"./${env.GITROOTFOLDER}/prometheusconfig.yml",env.SSHKEYLOCATION)
                    scpfunctions.TransferFile(env.publicProdIp,"./${env.GITROOTFOLDER}/docker-compose-prod.yml",env.SSHKEYLOCATION)
                    scpfunctions.TransferFile(env.publicProdIp,"./${env.GITROOTFOLDER}/prometheusconfig.yml",env.SSHKEYLOCATION)
                }
            }
        }

        stage('Pull + Run from dockerhub to test server') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps 
            {
                script
                {
                    
                    dockerfunctions.PullDockerCompose(env.publicTestIp,env.SSHKEYLOCATION,env.RELEVANT_DOCKER_TAG,"./docker-compose-test.yml")
                    dockerfunctions.StartDockerCompose(env.publicTestIp,env.SSHKEYLOCATION,env.RELEVANT_DOCKER_TAG,"./docker-compose-test.yml")
                }
            }
        }

        stage('Curl Test') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps 
            {
                script
                {
                    testingfunctions.curlTest(env.publicTestIp,"5000")
                }
            }
        }
        
        stage('Closing test server- if success') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps 
            {
                script
                {
                    dockerfunctions.StopDockerCompose(env.publicTestIp,env.SSHKEYLOCATION,"./docker-compose-test.yml")
                    dockerfunctions.cleanDockerContainersAndImages(env.publicTestIp,env.SSHKEYLOCATION)
                    awsfunctions.closeInstance(env.instanceTestId)
                }
            }
        }


        


        stage('Deployment') 
        {
            when 
            {
                expression 
                {
                    return env.NO_CHANGES != "true"
                }
            }
            steps 
            {
                script
                {
                    def userInput = input(
                        id: 'deployConfirmation',
                        message: 'Do you want to proceed with deployment?',
                        parameters: [
                            [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Proceed with deployment?', name: 'deploy']
                        ],
                        timeout: 5 * 60, // 5 minutes in seconds
                        submitter: 'user'
                    )
                    
                    if (userInput.deploy) {
                        dockerfunctions.PullDockerCompose(env.publicProdIp,env.SSHKEYLOCATION,env.RELEVANT_DOCKER_TAG,"./docker-compose-prod.yml")
                        dockerfunctions.StartDockerCompose(env.publicProdIp,env.SSHKEYLOCATION,env.RELEVANT_DOCKER_TAG,"./docker-compose-prod.yml")
                        dockerfunctions.cleanDockerContainersAndImages(env.publicProdIp,env.SSHKEYLOCATION)
                    } else {
                        echo "Deployment skipped by user."
                        currentBuild.result = 'SUCCESS'
                    }
                }
            }
        }
    }
}
