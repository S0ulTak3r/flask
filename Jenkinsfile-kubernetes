
pipeline
{
    agent any

    environment {
        SSHKEYLOCATION = "/var/lib/jenkins/.ssh/Daniel.pem"
        DOCKERPROJECTNAME = "s0ultak3r/dockerflask"
        DOCKERDBNAME = "s0ultak3r/dockerdb"
        ANSIBLEFOLDER = "/var/lib/jenkins/AnsibleFiles/Daniel-B-AutoAnsible"
        GITURL = "git@github.com:S0ulTak3r/flask.git"
        REQLOCATION = "./flask/flask-app/requirements.txt"
        GIT_SSH_COMMAND = "ssh -o StrictHostKeyChecking=no"
    }

    triggers {
        pollSCM('*/1 * * * *')
    }

    stages 
    {

        stage("Open Kubectl Proxy From Windows")
        {
            steps
            {
                script
                {
                    sh '''
                        ssh -o StrictHostKeyChecking=no creed@192.168.56.1 "start /B cmd /C \"kubectl proxy --address=0.0.0.0 --port=8080 --accept-hosts=.* > kubectl_proxy.log 2>&1\""
                    '''
                }
            }
        }

        stage('Changes Check') {
            steps {
                script {
                    checkChanges()
                }
            }
        }

        stage('Cleanup') {
            when {
                expression {
                    return env.NO_CHANGES != "true"
                }
            }
            steps 
            {
                script 
                {
                    try 
                    {
                        echo "attempting Cleanup"
                        sh 'rm -rf *'
                        sh "docker images | grep -w 's0ultak3r/dockerflask' | grep -w 1\\.[0-9]* | awk '{print \$2}' | xargs -I {} docker rmi s0ultak3r/dockerflask:{}"
                        sh "docker images | grep -w 's0ultak3r/dockerdb' | grep -w 1\\.[0-9]* | awk '{print \$2}' | xargs -I {} docker rmi s0ultak3r/dockerdb:{}"
                        sh "docker image prune -f"
                    } catch (Exception e) {
                        echo "Error: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error "Failed to cleanup"
                    }
                }
            }
        }

        stage('Clone') {
            when {
                expression {
                    return env.NO_CHANGES != "true"
                }
            }
            steps {
                script {
                    clonegit(env.GITURL)
                }
            }
        }

        stage('Install Dependencies') {
            when {
                expression {
                    return env.NO_CHANGES != "true"
                }
            }
            steps {
                script 
                {
                    sh 'pip install --upgrade pip'
                    installDependenciesSystemLvl()
                }
            }
        }

        stage('Build-create dockerFlask image and push') {
            when {
                expression {
                    return env.NO_CHANGES != "true"
                }
            }
            steps {
                script {
                    BuildAndPush(env.DOCKERPROJECTNAME, "./flask/flask-app/")
                }
            }
        }

        stage('Build-create dockerDB image and push') {
            when {
                expression {
                    return env.NO_CHANGES != "true"
                }
            }
            steps {
                script {
                    BuildAndPush(env.DOCKERDBNAME, "./flask/mysql/")
                }
            }
        }



        stage('Deployment') {
            when {
                expression {
                    return env.NO_CHANGES != "true"
                }
            }
            steps {
                echo 'Making Sure I am in the right context...'
                sh "kubectl config use-context docker-desktop"
                echo "Deploying application"
                sh "kubectl apply -f ./flask/KubernetesFiles/deployment.yml"
                sh "kubectl apply -f ./flask/KubernetesFiles/service.yml"
            }
        }

        stage('Rollout Restart') {
            when {
                expression {
                    return env.NO_CHANGES != "true"
                }
            }
            steps {
                echo 'Performing rollout restart...'
                sh "kubectl rollout restart deployment/flask-deployment"
                sh "kubectl rollout restart deployment/mysql-deployment"
            }
        }

        stage('Close Kubectl Proxy On Windows')
        {
            steps
            {
                script
                {
                    sh "ssh -o StrictHostKeyChecking=no creed@192.168.56.1 'taskkill /F /IM kubectl.exe'"
                }
            }
        }
    }
}


def pullFlaskAndDB(String server)
{
    try 
    {
        // function body
        echo "cleaning"
        sh "ssh -o StrictHostKeyChecking=no -i ${env.SSHKEYLOCATION} ec2-user@${server} 'sudo docker container prune --force'"
        echo 'pull +run docker'
        sh "ssh -o StrictHostKeyChecking=no -i ${env.SSHKEYLOCATION} ec2-user@${server} 'docker-compose pull'"
        sh "ssh -o StrictHostKeyChecking=no -i ${env.SSHKEYLOCATION} ec2-user@${server} 'docker-compose up --no-build -d'"
    } 
    catch (Exception e) 
    {
        echo "Error: ${e.getMessage()}"
        currentBuild.result = 'FAILURE'
        error "Failed to pull and run docker on ${server}"
    }
}

def checkChanges()
{
    try
    {
        def changeSets = currentBuild.changeSets
        if (changeSets.size() == 0)
        {
            println('No commits have been made. Proceeding with pipeline execution...')
            env.NO_CHANGES = "false"
        } 
        else 
        {
            def modifiedFiles = []
            for(changeSet in changeSets) 
            {
                for(item in changeSet) 
                {
                    modifiedFiles += item.getAffectedPaths()
                }
            }
            modifiedFiles = modifiedFiles.minus('Jenkinsfile-dockercompose2')
            
            if (modifiedFiles.isEmpty()) 
            {
                println('Skipping pipeline execution as the only change is to the Jenkinsfile.')
                env.NO_CHANGES = "true"
            }
            else
            {
                env.NO_CHANGES = "false"
            }
        }
    }
    catch (Exception e) 
    {
        echo "Error: ${e.getMessage()}"
        currentBuild.result = 'FAILURE'
        error "Failed to check changes"
    }
}
def BuildAndPush(String project, String location)
{
    try
    {
        dir("${location}") 
        {
            // Stage building
            echo 'Building flask'
            sh "docker build -t ${project}:latest -t ${project}:1.${BUILD_NUMBER} ."
            sh "docker push --all-tags ${project}"
        }
    }
    catch  (Exception e)
    {
        echo "Error: ${e.getMessage()}"
        currentBuild.result = 'FAILURE'
        error "Failed to build and push ${project}"
    }
}

def TransferFile(String server, String fileLocation, String sshkey)
{
    try
    {
        echo "transferring docker-compose to ${server}"
        sh "scp -o StrictHostKeyChecking=no -i ${sshkey} ${fileLocation} ec2-user@${server}:."
    }
    catch (Exception e)
    {
        echo "Error: ${e.getMessage()}"
        currentBuild.result = 'FAILURE'
        error "Failed to transfer file to ${server}"
    }
}

def clonegit(String gitUrl)
{
    try
    {
        //clonning from github to workspace
        echo 'Cloning repository...'
        sh "git clone ${gitUrl}"
        sh 'ls'
    }
    catch (Exception e)
    {
        echo "Error: ${e.getMessage()}"
        currentBuild.result = 'FAILURE'
        error "Failed to clone repository"
    }
}

def installDependenciesSystemLvl()
{
    try
    {
        //Install dependencies
        echo 'Installing dependencies...'
        sh "ansible-playbook ${ANSIBLEFOLDER}/installLocal.yml"
        sh "pip install -r ${REQLOCATION}"
    }
    catch (Exception e)
    {
        echo "Error: ${e.getMessage()}"
        currentBuild.result = 'FAILURE'
        error "Failed to install dependencies system level"
    }
}

def GetInstanceDetails()
{
    try
    {
        def instanceTestId = sh(script: "aws ec2 describe-instances --region eu-north-1 --filters 'Name=tag:servernumber,Values=flask1' 'Name=instance-state-name,Values=stopped' | jq -r .Reservations[].Instances[].InstanceId", returnStdout: true).trim()
        def instanceProdId = sh(script: "aws ec2 describe-instances --region eu-north-1 --filters 'Name=tag:servernumber,Values=flask2' 'Name=instance-state-name,Values=stopped' | jq -r .Reservations[].Instances[].InstanceId", returnStdout: true).trim()
                        
        if(instanceTestId)
        {
            //Test Not Running
                sh (script: "aws ec2 start-instances --region eu-north-1 --instance-ids ${instanceTestId}")
                sh (script: "aws ec2 wait instance-running --region eu-north-1 --instance-ids ${instanceTestId}")
        }
        else
        {
            //Gather Id with Running state
            instanceTestId= sh(script: "aws ec2 describe-instances --region eu-north-1 --filters 'Name=tag:servernumber,Values=flask1' 'Name=instance-state-name,Values=running' | jq -r .Reservations[].Instances[].InstanceId", returnStdout: true).trim()
        }
        def publicTestIp = sh(script: "aws ec2 describe-instances --region eu-north-1 --instance-ids ${instanceTestId} | jq -r .Reservations[].Instances[].PublicIpAddress", returnStdout: true).trim()
        env.instanceTestId = instanceTestId
        env.publicTestIp = publicTestIp


        if(instanceProdId)
        {
            //prod not running
            sh (script: "aws ec2 start-instances --region eu-north-1 --instance-ids ${instanceProdId}")
            sh (script: "aws ec2 wait instance-running --region eu-north-1 --instance-ids ${instanceProdId}")
        }
        else
        {
            //Gather Id with Running state
            instanceProdId= sh (script: "aws ec2 describe-instances --region eu-north-1 --filters 'Name=tag:servernumber,Values=flask2' 'Name=instance-state-name,Values=running' | jq -r .Reservations[].Instances[].InstanceId", returnStdout: true).trim()
        }
        def publicProdIp =sh(script: "aws ec2 describe-instances --region eu-north-1 --instance-ids ${instanceProdId} | jq -r .Reservations[].Instances[].PublicIpAddress", returnStdout: true).trim() 
        env.instanceProdId=instanceProdId
        env.publicProdIp=publicProdIp
    }
    catch (Exception e)
    {
        echo "Error: ${e.getMessage()}"
        currentBuild.result = 'FAILURE'
        error "Failed to get instance details"
    }
    
}

def installDockerRemote(String ansible_folder , String playbook)
{
    try
    {
        dir("${ansible_folder}")
        {
            echo "installing docker"
            sh "ansible-playbook -i aws_ec2.yml ${playbook}"
        }
    }
    catch (Exception e)
    {
        echo "Error: ${e.getMessage()}"
        currentBuild.result = 'FAILURE'
        error "Failed to install docker"
    }
}


def closeInstance(String instanceid,String instanceip,String sshkey)
{
    try
    {
        echo "closing container"
        sh "ssh -o StrictHostKeyChecking=no -i ${sshkey} ec2-user@${instanceip} 'docker-compose down --no-build'"
        sh "aws ec2 stop-instances --region eu-north-1 --instance-ids ${instanceid}"
        sh "aws ec2 wait instance-stopped --region eu-north-1 --instance-ids ${instanceid}"
    }
    catch (Exception e)
    {
        echo "Error: ${e.getMessage()}"
        currentBuild.result = 'FAILURE'
        error "Failed to close instance"
    }
}

