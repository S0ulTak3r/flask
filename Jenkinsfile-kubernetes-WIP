@Library(value="FunctionsLibrary", changelog=false) _


// Define a helper function at the top of your Jenkinsfile
def shouldRunStage() 
{
    return env.NO_CHANGES != "true"
}

pipeline 
{
    agent any

    environment 
    {
        // Define environment variables that will be used throughout the pipeline
        SSHKEYLOCATION = "${params.SSHKEYLOCATION}"
        DOCKERFLASKIMAGE = "${params.DOCKERFLASKIMAGE}"
        DOCKERDBIMAGE = "${params.DOCKERDBIMAGE}"
        ANSIBLEFOLDER = "${params.ANSIBLEFOLDER}"
        GITURL = "${params.GITURL}"
        REQLOCATION = "${params.REQLOCATION}"
        GIT_SSH_COMMAND = "ssh -o StrictHostKeyChecking=no"
        WINDOWSIP= "${params.WINDOWSIP}"
        GITROOTFOLDER = "${params.GITROOTFOLDER}"
        GCSBUCKETNAME = "${params.GCSBUCKETNAME}"
        GCSHELMFOLDER = "${params.GCSHELMFOLDER}"
        INSTALLLOCALPLAYBOOK = "${params.INSTALLLOCALPLAYBOOK}"
        CLUSTERNAME = "${params.CLUSTERNAME}"
        CLUSTERZONE = "${params.CLUSTERZONE}"
        GOOGLEPROJECTNAME = "${params.GOOGLEPROJECTNAME}"
        TERRAFORMFOLDERNAME = "${params.TERRAFORMFOLDERNAME}"
        FLASKBUILDFOLDER = "${params.FLASKBUILDFOLDER}"
        DBBUILDFOLDER = "${params.DBBUILDFOLDER}"
        TESTCONTEXT = "${params.TESTCONTEXT}"
        TESTHELMRELEASE = "${params.TESTHELMRELEASE}"
        PRODCONTEXT = "${params.PRODCONTEXT}"
        PRODHELMRELEASE = "${params.PRODHELMRELEASE}"
        HELMPACKAGENAME = "${params.HELMPACKAGENAME}"
    }

    triggers 
    {
        // Poll the Source Code Management system every minute
        pollSCM('*/1 * * * *')
    }

    stages 
    {

        //
        stage('Version Check') 
        {
            steps 
            {
                script 
                {
                    if (params.RELEVANTDOCKERTAGDB == "" && params.RELEVANTDOCKERTAGFLASK == "" ) 
                    {
                        echo "No version specified for rollback/upgrade, getting latest versionS from file"
                    }
                    else
                    {
                        
                        echo "Version specified for rollback/upgrade"
                        if (params.RELEVANTDOCKERTAGFLASK != "")
                        {
                            echo "if Deploying version for flask: ${params.RELEVANTDOCKERTAGFLASK}"
                        }
                        else
                        {
                            echo "Deployment Not Changed For Flask, Will Use Latest Version From File"
                        }
                        if (params.RELEVANTDOCKERTAGDB != "")
                        {
                            echo "if Deploying version for db: ${params.RELEVANTDOCKERTAGDB}"
                        }
                        else
                        {
                            echo "Deployment Not Changed For DB, Will Use Latest Version From File"
                        }
                    } 
                }
            }
        }

        // Initialize a proxy for subsequent operations
        stage('start proxy') 
        {
            steps 
            {
                script 
                {
                    // Initialize the proxy on a remote machine to enable secure communication
                    k8functions.startProxyRemote(env.WINDOWSIP)
                }
            }
        }

        // Check if there are any changes in the source code repository since the last run
        stage('Changes Check') 
        {
            steps 
            {
                script 
                {
                    // Determine if there have been any changes to the repository. If not, set the NO_CHANGES environment variable to true
                    pipelinefunctions.checkChanges("Jenkinsfile-dockercompose22")
                }
            }
        }


        // Clean up the workspace to ensure a fresh environment for this run, and remove outdated docker images
        stage('Cleanup') 
        {
            when 
            {
                // Only run this stage if there have been changes to the repository
                expression { return shouldRunStage() }
            }
            steps 
            {
                script 
                {
                    // Clean up Jenkins workspace
                    pipelinefunctions.cleanupWorkspace()

                    // Prune docker containers
                    dockerfunctions.pruneDockerContainers()

                    // Prune docker images
                    dockerfunctions.pruneDockerImages()

                    // Retain only the latest versions of the Docker images
                    dockerfunctions.retainLatestImageVersionOnly(env.DOCKERFLASKIMAGE)
                    dockerfunctions.retainLatestImageVersionOnly(env.DOCKERDBIMAGE)
                }
            }
        }

        // Clone the latest code from the repository, download the latest Unity build, and package the application into a Helm chart
        stage('Build(Git Clone, Helm Package)') 
        {
            when 
            {
                // Only run this stage if there have been changes to the repository
                expression { return shouldRunStage() }
            }
            steps 
            {
                script 
                {
                    // Clone the latest version of the source code from the git repository
                    gitfunctions.clonegit(env.GITURL, 'main')
                    
                    // Download the latest Unity build from an S3 bucket
                    sh "aws s3 cp s3://daniel-sela/unity-build.zip unity-build.zip"
                    
                    // Extract the Unity build to the appropriate directory
                    sh "unzip unity-build.zip -d ./flask/flask-app/Static/"

                    // Package the application into a Helm chart, and either upload it to a GCS bucket (if changes were detected) 
                    // or fetch the latest version of the chart from the bucket (if no changes were detected)
                    helmfunctions.packageHelmChart(env.GITROOTFOLDER, env.GCSBUCKETNAME, env.GCSHELMFOLDER)
                }
            }
        }


        stage('Setup') 
        {
            steps 
            {
                script 
                {
                    def jsonText = readFile("./${env.GITROOTFOLDER}/VersionControl/GoogleKubernetesPipeline/versions.json")
                    echo "JSON Content: $jsonText"
                    def jsonSlurper = new groovy.json.JsonSlurper()
                    echo "jsonSlurper: $jsonSlurper"
                    def versions = jsonSlurper.parseText(jsonText)

                    echo "Flask version: ${versions.flask}"
                    echo "Database version: ${versions.database}"

                    
                    if (params.RELEVANTDOCKERTAGFLASK == "") 
                    {
                        env.RELEVANT_DOCKER_TAGFLASK = "${versions.flask}"
                    } 
                    else 
                    {
                        env.RELEVANT_DOCKER_TAGFLASK = params.RELEVANTDOCKERTAGFLASK
                    }

                    if (params.RELEVANTDOCKERTAGDB == "") 
                    {
                        env.RELEVANT_DOCKER_TAGDB = "${versions.database}"
                    } 
                    else 
                    {
                        env.RELEVANT_DOCKER_TAGDB = params.RELEVANTDOCKERTAGDB
                    }

                    echo "Deploying Flask version: ${env.RELEVANT_DOCKER_TAGFLASK}"  // Updated variable reference
                    echo "Deploying DB version: ${env.RELEVANT_DOCKER_TAGDB}"        // Updated variable reference
                }
            }
        }

        // Install required dependencies for the project
        stage('Install Dependencies') 
        {
            when 
            {
                // Only run this stage if there have been changes to the repository
                expression { return shouldRunStage() }
            }
            steps 
            {
                script 
                {
                    // Install system-level dependencies required for the project using Ansible
                    ansiblefunctions.installDependenciesSystemLvl(env.ANSIBLEFOLDER,env.INSTALLLOCALPLAYBOOK)
                }
            }
        }

        // Provision or update the cloud infrastructure using Terraform
        stage('Prepare GKE Cluster') 
        {
            when
            {
                // Only run this stage if there have been changes to the repository
                expression { return shouldRunStage() }
            }
            steps 
            {
                script 
                {
                    // Use Terraform to provision or update the Google Kubernetes Engine (GKE) cluster
                    terraformfunctions.terraformApply("${env.GITROOTFOLDER}/${env.TERRAFORMFOLDERNAME}",env.CLUSTERNAME,env.CLUSTERZONE,env.GOOGLEPROJECTNAME) 
                }
            }
        }

        // Log in to DockersHub to enable pushing of Docker images
        stage('Docker Login') 
        {
            when 
            {
                // Only run this stage if there have been changes to the repository
                expression { return shouldRunStage() }
            }
            steps 
            {
                script 
                {
                    // Authenticate with DockerHub using stored Jenkins credentials to enable pushing of Docker images
                    dockerfunctions.loginDockerHub()
                }
            }
        }

        // Build Docker images for the Flask application and the database, and push them to DockerHub
        stage('Parallel Docker Build and Push') 
        {
            when 
            {
                // Only run this stage if there have been changes to the repository
                expression { return shouldRunStage() }
            }
            steps 
            {
                script 
                {
                    def newFlaskTag = null
                    def newDBTag = null
                    // Build Docker images for the Flask application and the database in parallel to save time
                    // If there are relevant changes detected in the source code, the images will also be pushed to DockerHub
                    parallel(
                        "Build and Push Flask Docker Image": {
                            newFlaskTag = dockerfunctions.BuildCheckAndPushV2(env.DOCKERFLASKIMAGE, env.GITROOTFOLDER, env.FLASKBUILDFOLDER)
                        },
                        "Build and Push DB Docker Image": {
                            newDBTag = dockerfunctions.BuildCheckAndPushV2(env.DOCKERDBIMAGE, env.GITROOTFOLDER, env.DBBUILDFOLDER)
                        }
                    )

                    // Sequentially prompt user for each Docker image with a new tag
                    if (newFlaskTag != null) {
                        def userInput = timeout(time: 5, unit: 'MINUTES') {
                            input(
                                id: 'deployConfirmationFlask',
                                message: 'new flask tag detected, deploy this if all test succeed?',
                                parameters: [ choice(choices: ['Yes', 'No'], description: 'Proceed with deployment?', name: 'decision') ]
                            )
                        }
                        if (userInput == 'Yes') {
                            echo "updating production tag to ${newFlaskTag}"
                            env.RELEVANT_DOCKER_TAGFLASK = newFlaskTag
                        } else {
                            echo "production tag not updated to latest build version"
                        }
                    }
                    
                    if (newDBTag != null) {
                        def userInput = timeout(time: 5, unit: 'MINUTES') {
                            input(
                                id: 'deployConfirmationDB',
                                message: 'new db tag detected, deploy this if all test succeed?',
                                parameters: [ choice(choices: ['Yes', 'No'], description: 'Proceed with deployment?', name: 'decision') ]
                            )
                        }
                        if (userInput == 'Yes') {
                            echo "updating production tag to ${newDBTag}"
                            env.RELEVANT_DOCKER_TAGDB = newDBTag
                        } else {
                            echo "production tag not updated to latest build version"
                        }
                    }
                }
            }
        }


        stage("Testing Images Versions")
        {
            steps
            {
                script
                {
                    echo "flask test image version: ${env.RELEVANT_DOCKER_TAGFLASK}"
                    echo "db test image version: ${env.RELEVANT_DOCKER_TAGDB}"
                }
            }
        }


        // Deploy the application to a testing environment using Helm
        stage('Deployment To Testing Environment') 
        {
            when 
            {
                // Only run this stage if there have been changes to the repository
                expression { return shouldRunStage() }
            }
            steps 
            {
                script 
                {
                    // Deploy the application to a Kubernetes testing environment using Helm, targeting a specific environment (e.g., "Testing")
                    helmfunctions.deployToK8s("docker-desktop","myproject","./flask","Testing","flask-test",env.RELEVANT_DOCKER_TAGFLASK,env.RELEVANT_DOCKER_TAGDB)

                    // Retrieve the TCP port on which the Flask application is accessible in the testing environment
                    k8functions.getTcpPort("flask-service-testing")
                }
            }
        }

        // Restart the Kubernetes deployments to ensure they are using the latest Docker images
        stage('Rollout Restart') 
        {
            when 
            {
                // Only run this stage if there have been changes to the repository
                expression { return shouldRunStage() }
            }
            steps 
            {
                script 
                {
                    // Perform a rollout restart on the Flask and MySQL deployments to ensure they pick up the latest Docker images
                    k8functions.rollout("deployment/flask-deployment")
                    k8functions.rollout("deployment/mysql-deployment")
                }
            }
        }

        // Test the application in the testing environment to ensure it is working correctly
        stage('Testing Test Environment') 
        {
            when 
            {
                // Only run this stage if there have been changes to the repository
                expression { return shouldRunStage() }
            }
            steps 
            {
                script 
                {
                    // Test the Flask application in the testing environment using a simple curl command to ensure it responds correctly
                    testingfunctions.curlTest(env.WINDOWSIP,env.KUBECTLTCPPORT)
                }
            }
        }

        // Shut down the testing environment now that testing is complete
        stage('Closing Testing Environment') 
        {
            when 
            {
                // Only run this stage if there have been changes to the repository
                expression { return shouldRunStage() }
            }
            steps 
            {
                script 
                {
                    // Uninstall the Helm release for the Flask application in the testing environment, effectively shutting it down
                    k8functions.uninstallHelmRelease("flask-test")
                }
            }
        }



        // Deploy the application to a production environment using Helm
        stage('Deploying On Google Kubernetes Production') 
        {
            when 
            {
                // Only run this stage if there have been changes to the repository
                expression { return shouldRunStage() }
            }
            steps 
            {
                script 
                {
                    def deployMessage = "Do you want to proceed with deployment?\nFlask Version: ${env.RELEVANT_DOCKER_TAGFLASK}\nDB Version: ${env.RELEVANT_DOCKER_TAGDB}"

                    def userInput = timeout(time: 5, unit: 'MINUTES') {
                        input(
                            id: 'deployConfirmation',
                            message: deployMessage,
                            parameters: [
                                booleanParam(defaultValue: false, description: 'Proceed with deployment?', name: 'deploy')
                            ]
                        )
                    }

                    if (userInput) 
                    {
                        echo "Deploying to production"
                        // Deploy the application to a Kubernetes production environment using Helm, targeting a specific environment (e.g., "Production")
                        helmfunctions.deployToK8s("gke_vernal-tracer-393305_me-west1-a_cluster-flask2","myproject","./flask","Production","flask-prod",env.RELEVANT_DOCKER_TAGFLASK,env.RELEVANT_DOCKER_TAGDB)
                        // Retrieve detailed information about the production environment for logging or diagnostic purposes
                        k8functions.getAllInfo()

                        // Update the versions.json file using jq
                        sh """
                            jq '.flask = \"${env.RELEVANT_DOCKER_TAGFLASK}\" | .database = \"${env.RELEVANT_DOCKER_TAGDB}\"' ./${env.GITROOTFOLDER}/VersionControl/GoogleKubernetesPipeline/versions.json > ./${env.GITROOTFOLDER}/VersionControl/GoogleKubernetesPipeline/tmp_versions.json
                            mv ./${env.GITROOTFOLDER}/VersionControl/GoogleKubernetesPipeline/tmp_versions.json ./${env.GITROOTFOLDER}/VersionControl/GoogleKubernetesPipeline/versions.json
                        """

                        try 
                        {
                            //Optional: Commit and push the change to the repository
                            sh """
                                cd ${env.GITROOTFOLDER}/
                                git add ./VersionControl/GoogleKubernetesPipeline/versions.json
                                git commit -m 'Update versions after successful deployment'
                                git push origin main
                            """
                        }
                        catch (e)
                        {
                            // If the commit fails, print a message to the console and continue with the pipeline
                            echo "Commit failed, meaning the version didnt change from what is stated in the file!,continuing with pipeline"
                        }


                    } 
                    else 
                    {
                        echo "Deployment skipped by user."
                        currentBuild.result = 'SUCCESS'
                    }

                    
                }
            }
        }

        // Restart the Kubernetes deployments in the production environment to ensure they are using the latest Docker images
        stage('Rollout Restart Production') 
        {
            when 
            {
                // Only run this stage if there have been changes to the repository
                expression { return shouldRunStage() }
            }
            steps 
            {
                script 
                {
                    // Perform a rollout restart on the Flask and MySQL deployments in the production environment to ensure they pick up the latest Docker images
                    k8functions.rollout("deployment/flask-deployment")
                    k8functions.rollout("deployment/mysql-deployment")
                    k8functions.getAllInfo()
                }
            }
        }

        // Shut down the proxy that was started at the beginning of the pipeline
        stage('closing proxy') 
        {
            when 
            {
                // Only run this stage if there have been changes to the repository
                expression { return shouldRunStage() }
            }
            steps 
            {
                script 
                {
                    // Close the proxy on the remote machine to clean up and finalize the pipeline
                    k8functions.closeProxyRemote(env.WINDOWSIP)
                }
            }
        }
    }
}
